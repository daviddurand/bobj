/* Generated By:JavaCC: Do not edit this line. BOBJConstants.java */
package bobj;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BOBJConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int OBJ = 12;
  /** RegularExpression Id. */
  int TH = 13;
  /** RegularExpression Id. */
  int BTH = 14;
  /** RegularExpression Id. */
  int DTH = 15;
  /** RegularExpression Id. */
  int ENDO = 16;
  /** RegularExpression Id. */
  int ENDTH = 17;
  /** RegularExpression Id. */
  int ENDB = 18;
  /** RegularExpression Id. */
  int ENDD = 19;
  /** RegularExpression Id. */
  int END = 20;
  /** RegularExpression Id. */
  int PR = 21;
  /** RegularExpression Id. */
  int PROTECTING = 22;
  /** RegularExpression Id. */
  int EX = 23;
  /** RegularExpression Id. */
  int EXTENDING = 24;
  /** RegularExpression Id. */
  int US = 25;
  /** RegularExpression Id. */
  int USE = 26;
  /** RegularExpression Id. */
  int USING = 27;
  /** RegularExpression Id. */
  int INC = 28;
  /** RegularExpression Id. */
  int INCLUDING = 29;
  /** RegularExpression Id. */
  int IS = 30;
  /** RegularExpression Id. */
  int SORT = 31;
  /** RegularExpression Id. */
  int SORTS = 32;
  /** RegularExpression Id. */
  int BSORT = 33;
  /** RegularExpression Id. */
  int BSORTS = 34;
  /** RegularExpression Id. */
  int PSORT = 35;
  /** RegularExpression Id. */
  int SUBSORT = 36;
  /** RegularExpression Id. */
  int SUBSORTS = 37;
  /** RegularExpression Id. */
  int VAR = 38;
  /** RegularExpression Id. */
  int VARS = 39;
  /** RegularExpression Id. */
  int OP = 40;
  /** RegularExpression Id. */
  int OPS = 41;
  /** RegularExpression Id. */
  int OPAS = 42;
  /** RegularExpression Id. */
  int EQ = 43;
  /** RegularExpression Id. */
  int CQ = 44;
  /** RegularExpression Id. */
  int CEQ = 45;
  /** RegularExpression Id. */
  int ASSOC = 46;
  /** RegularExpression Id. */
  int COMM = 47;
  /** RegularExpression Id. */
  int IDEM = 48;
  /** RegularExpression Id. */
  int PREC = 49;
  /** RegularExpression Id. */
  int IDR = 50;
  /** RegularExpression Id. */
  int ID = 51;
  /** RegularExpression Id. */
  int NONCONG = 52;
  /** RegularExpression Id. */
  int MEMO = 53;
  /** RegularExpression Id. */
  int LESS = 54;
  /** RegularExpression Id. */
  int ARROW = 55;
  /** RegularExpression Id. */
  int DOT = 56;
  /** RegularExpression Id. */
  int VARSOF = 57;
  /** RegularExpression Id. */
  int COLON = 58;
  /** RegularExpression Id. */
  int DOUBLECOLON = 59;
  /** RegularExpression Id. */
  int ADD = 60;
  /** RegularExpression Id. */
  int SUM = 61;
  /** RegularExpression Id. */
  int TO = 62;
  /** RegularExpression Id. */
  int STAR = 63;
  /** RegularExpression Id. */
  int LB = 64;
  /** RegularExpression Id. */
  int RB = 65;
  /** RegularExpression Id. */
  int DFN = 66;
  /** RegularExpression Id. */
  int RED = 67;
  /** RegularExpression Id. */
  int BRED = 68;
  /** RegularExpression Id. */
  int SOLVE = 69;
  /** RegularExpression Id. */
  int OPEN = 70;
  /** RegularExpression Id. */
  int OPENR = 71;
  /** RegularExpression Id. */
  int CLOSE = 72;
  /** RegularExpression Id. */
  int VIEW = 73;
  /** RegularExpression Id. */
  int ENDV = 74;
  /** RegularExpression Id. */
  int FROM = 75;
  /** RegularExpression Id. */
  int LOAD = 76;
  /** RegularExpression Id. */
  int APPLY = 77;
  /** RegularExpression Id. */
  int START = 78;
  /** RegularExpression Id. */
  int AT = 79;
  /** RegularExpression Id. */
  int WITH = 80;
  /** RegularExpression Id. */
  int WITHIN = 81;
  /** RegularExpression Id. */
  int PRINT = 82;
  /** RegularExpression Id. */
  int PARENS = 83;
  /** RegularExpression Id. */
  int OF = 84;
  /** RegularExpression Id. */
  int QUIT = 85;
  /** RegularExpression Id. */
  int PWD = 86;
  /** RegularExpression Id. */
  int CD = 87;
  /** RegularExpression Id. */
  int LS = 88;
  /** RegularExpression Id. */
  int IN = 89;
  /** RegularExpression Id. */
  int SHOW = 90;
  /** RegularExpression Id. */
  int MAKE = 91;
  /** RegularExpression Id. */
  int ENDM = 92;
  /** RegularExpression Id. */
  int LET = 93;
  /** RegularExpression Id. */
  int COMMENT = 94;
  /** RegularExpression Id. */
  int COBASIS = 95;
  /** RegularExpression Id. */
  int COB = 96;
  /** RegularExpression Id. */
  int COV = 97;
  /** RegularExpression Id. */
  int STOP = 98;
  /** RegularExpression Id. */
  int SELECT = 99;
  /** RegularExpression Id. */
  int SET = 100;
  /** RegularExpression Id. */
  int TRACE = 101;
  /** RegularExpression Id. */
  int ON = 102;
  /** RegularExpression Id. */
  int OFF = 103;
  /** RegularExpression Id. */
  int FULL = 104;
  /** RegularExpression Id. */
  int PARSE = 105;
  /** RegularExpression Id. */
  int INCLUDE = 106;
  /** RegularExpression Id. */
  int REDUCTION = 107;
  /** RegularExpression Id. */
  int REDUCE = 108;
  /** RegularExpression Id. */
  int TIME = 109;
  /** RegularExpression Id. */
  int RULES = 110;
  /** RegularExpression Id. */
  int JBO = 111;
  /** RegularExpression Id. */
  int ASSOCIATIVE = 112;
  /** RegularExpression Id. */
  int COMMUTATIVE = 113;
  /** RegularExpression Id. */
  int HT = 114;
  /** RegularExpression Id. */
  int WEIV = 115;
  /** RegularExpression Id. */
  int ENDVIEW = 116;
  /** RegularExpression Id. */
  int GATHERING = 117;
  /** RegularExpression Id. */
  int PRECEDENCE = 118;
  /** RegularExpression Id. */
  int THEORY = 119;
  /** RegularExpression Id. */
  int SH = 120;
  /** RegularExpression Id. */
  int LONGQUIT = 121;
  /** RegularExpression Id. */
  int IDEMPOTENT = 122;
  /** RegularExpression Id. */
  int OBJECT = 123;
  /** RegularExpression Id. */
  int IDENTITY = 124;
  /** RegularExpression Id. */
  int DEFINE = 125;
  /** RegularExpression Id. */
  int INPUT = 126;
  /** RegularExpression Id. */
  int CONTEXT = 127;
  /** RegularExpression Id. */
  int CASE = 128;
  /** RegularExpression Id. */
  int FOR = 129;
  /** RegularExpression Id. */
  int MORPH = 130;
  /** RegularExpression Id. */
  int MB = 131;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 132;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 133;
  /** RegularExpression Id. */
  int HEX_LITERAL = 134;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 135;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 136;
  /** RegularExpression Id. */
  int EXPONENT = 137;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 138;
  /** RegularExpression Id. */
  int STRING_LITERAL = 139;
  /** RegularExpression Id. */
  int IDENTIFIER = 140;
  /** RegularExpression Id. */
  int SYMBOL = 141;
  /** RegularExpression Id. */
  int LETTER = 142;
  /** RegularExpression Id. */
  int DIGIT = 143;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTIPLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"***(\"",
    "\")***\"",
    "<token of kind 8>",
    "\"***\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 11>",
    "\"obj\"",
    "\"th\"",
    "\"bth\"",
    "\"dth\"",
    "\"endo\"",
    "\"endth\"",
    "\"endb\"",
    "\"endd\"",
    "\"end\"",
    "\"pr\"",
    "\"protecting\"",
    "\"ex\"",
    "\"extending\"",
    "\"us\"",
    "\"use\"",
    "\"using\"",
    "\"inc\"",
    "\"including\"",
    "\"is\"",
    "\"sort\"",
    "\"sorts\"",
    "\"dsort\"",
    "\"dsorts\"",
    "\"psort\"",
    "\"subsort\"",
    "\"subsorts\"",
    "\"var\"",
    "\"vars\"",
    "\"op\"",
    "\"ops\"",
    "\"op-as\"",
    "\"eq\"",
    "\"cq\"",
    "\"ceq\"",
    "\"assoc\"",
    "\"comm\"",
    "\"idem\"",
    "\"prec\"",
    "\"idr:\"",
    "\"id:\"",
    "\"ncong\"",
    "\"memo\"",
    "\"<\"",
    "\"->\"",
    "\".\"",
    "\"vars-of\"",
    "\":\"",
    "\"::\"",
    "\"+\"",
    "\"||\"",
    "\"to\"",
    "\"*\"",
    "\"[\"",
    "\"]\"",
    "\"dfn\"",
    "\"red\"",
    "\"cred\"",
    "\"solve\"",
    "\"open\"",
    "\"openr\"",
    "\"close\"",
    "\"view\"",
    "\"endv\"",
    "\"from\"",
    "\"load\"",
    "\"apply\"",
    "\"start\"",
    "\"at\"",
    "\"with\"",
    "\"within\"",
    "\"print\"",
    "\"parens\"",
    "\"of\"",
    "\"q\"",
    "\"pwd\"",
    "\"cd\"",
    "\"ls\"",
    "\"in\"",
    "\"show\"",
    "\"make\"",
    "\"endm\"",
    "\"let\"",
    "\"***>\"",
    "\"cobasis\"",
    "\"cob\"",
    "\"cov\"",
    "\"eof\"",
    "\"select\"",
    "\"set\"",
    "\"trace\"",
    "\"on\"",
    "\"off\"",
    "\"full\"",
    "\"parse\"",
    "\"include\"",
    "\"reduction\"",
    "\"reduce\"",
    "\"time\"",
    "\"rules\"",
    "\"jbo\"",
    "\"associative\"",
    "\"commutative\"",
    "\"ht\"",
    "\"weiv\"",
    "\"endview\"",
    "\"gathering\"",
    "\"precedence\"",
    "\"theory\"",
    "\"sh\"",
    "\"quit\"",
    "\"idempotent\"",
    "\"object\"",
    "\"identity\"",
    "\"define\"",
    "\"input\"",
    "\"context\"",
    "\"case\"",
    "\"for\"",
    "\"morph\"",
    "\"mb\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<SYMBOL>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\",\"",
    "\")\"",
  };

}
